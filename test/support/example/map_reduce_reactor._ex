defmodule Example.MapReduceReactor do
  @moduledoc false
  use Reactor

  # string of words
  input :words

  producer :split_to_words do
    argument :words, input(:words)

    impl(fn %{words: words}, _, _ ->
      stream =
        words
        |> split_into_stream()
        |> Stream.chunk_every(100)

      {:ok, stream}
    end)
  end

  map :count_batches do
    over result(:split_to_words)

    step :count_batch do
      argument :batch, element(:count_batches)
      impl fn %{batch: batch}, _, _ ->
        {:ok, Enum.frequencies(batch)}
      end
    end
  end

  reduce :into_result do
    over result(:count_batches)

    impl fn %{input: stream} ->

    end
  end
end
